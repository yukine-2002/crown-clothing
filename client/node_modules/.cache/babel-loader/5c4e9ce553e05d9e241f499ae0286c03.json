{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAvZzHOSsKAUJxs-KR_ZdlA15Q5U2LedAM\",\n  authDomain: \"crown-db-f6f35.firebaseapp.com\",\n  databaseURL: \"https://crown-db-f6f35-default-rtdb.firebaseio.com\",\n  projectId: \"crown-db-f6f35\",\n  storageBucket: \"crown-db-f6f35.appspot.com\",\n  messagingSenderId: \"758274981601\",\n  appId: \"1:758274981601:web:890068f9cb2d2fb77601a0\",\n  measurementId: \"G-7319D36L4Y\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`usera/${userAuth.uid}`);\n  const collectionRef = firestore.collection('usera');\n  const snapShot = await userRef.get(); //get inf user\n\n  console.log({\n    snapShot: snapShot.data()\n  });\n  const collectionSnapShot = await collectionRef.get(); // get all user\n\n  console.log({\n    collection: collectionSnapShot.docs.map(doc => doc.data())\n  });\n  console.log(userAuth);\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocument = (collectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(obj.title);\n    console.log(newDocRef);\n    batch.set(newDocRef, obj);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["D:/Document/VsCode Web/StudyFontEnd/ReactJs/crown-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","snapShot","get","console","log","data","collectionSnapShot","docs","map","exists","displayName","email","createdAt","Date","set","error","message","addCollectionAndDocument","collectionKey","objectToAdd","batch","forEach","obj","newDocRef","title","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config =  {\r\n  apiKey: \"AIzaSyAvZzHOSsKAUJxs-KR_ZdlA15Q5U2LedAM\",\r\n  authDomain: \"crown-db-f6f35.firebaseapp.com\",\r\n  databaseURL: \"https://crown-db-f6f35-default-rtdb.firebaseio.com\",\r\n  projectId: \"crown-db-f6f35\",\r\n  storageBucket: \"crown-db-f6f35.appspot.com\",\r\n  messagingSenderId: \"758274981601\",\r\n  appId: \"1:758274981601:web:890068f9cb2d2fb77601a0\",\r\n  measurementId: \"G-7319D36L4Y\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`usera/${userAuth.uid}`);\r\n  const collectionRef = firestore.collection('usera');\r\n\r\n\r\n  const snapShot = await userRef.get();\r\n\r\n  //get inf user\r\n  console.log({snapShot: snapShot.data()})\r\n\r\n  const collectionSnapShot = await collectionRef.get();\r\n\r\n  // get all user\r\n  console.log({collection : collectionSnapShot.docs.map(doc => doc.data())});\r\n\r\n  console.log(userAuth)\r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData\r\n      });\r\n    } catch (error) {\r\n      console.log('error creating user', error.message);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n};\r\n\r\nexport const addCollectionAndDocument =(collectionKey,objectToAdd) =>{\r\n  const collectionRef = firestore.collection(collectionKey);\r\n\r\n  const batch = firestore.batch();\r\n\r\n  objectToAdd.forEach(obj =>{\r\n    const newDocRef = collectionRef.doc(obj.title);\r\n    console.log(newDocRef)\r\n    batch.set(newDocRef,obj)\r\n  })\r\n}\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}